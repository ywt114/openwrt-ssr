name: Build_x86_64

on: 
  release:
    types: [published]

  #push:
  #  branches: 
  #    - master
  #  paths:
  #    - '.github/workflows/Build_OP_x86_64.yml'
  #schedule:
  #  - cron: 0 8 * * 5  
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sed -i -E 's/#(src-git.+)(helloworld.+)/\1\2/' feeds.conf.default
        sed -i '/(<%=pcdata(ver.luciversion)%>)/a\      built by ywt114' ./package/lean/autocore/files/x86/index.htm

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Add package
      working-directory: ./openwrt
      run: |
        cd package
        git clone https://github.com/xiaorouji/openwrt-package.git
        mv openwrt-package/lienol/luci-app-passwall/ ./lean
        git clone https://github.com/project-openwrt/luci-app-unblockneteasemusic.git
        mv luci-app-unblockneteasemusic/ ./lean
        git clone https://github.com/project-openwrt/luci-app-koolproxyR.git
        mv luci-app-koolproxyR/ ./lean
        git clone https://github.com/rufengsuixing/luci-app-adguardhome.git
        mv luci-app-adguardhome/ ./lean
    #    git clone https://github.com/garypang13/luci-app-eqos.git
    #    mv luci-app-eqos/ ./lean
    #    git clone https://github.com/vernesong/OpenClash.git
    #    mv OpenClash/luci-app-openclash/ ./lean
    #    rm -rf OpenClash/
    #    git clone https://github.com/frainzy1477/luci-app-clash.git
    #    mv luci-app-clash/ ./lean

    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig

    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s

    - name: Zip Files
      run: |
        gzip ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img
    
    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        cp ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img* ./artifact/
        cp ./openwrt/.config ./artifact/
        zip -r artifact.zip ./artifact/
        release_tag="Openwrt-X86-64-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"
    
    - name: Upload Artifact
      uses: actions/upload-artifact@master
      with:
        name: Build_x86_64
        path: ./artifact/
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ywt114 }}
      with:
        tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
        release_name: 自动发布 ${{ steps.assemble_artifact.outputs.release_tag }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ywt114 }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./artifact.zip
        asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
        asset_content_type: application/zip
